package Practicals;

public class NQueensBacktracking {

    public static void main(String[] args) {
        int n = 8; // Change this value for different board sizes
        int[][] board = new int[n][n];

        // Place the first queen at (0, 0)
        board[0][0] = 1;

        solveNQueens(board, 1, n);

        // Print the final N-Queens matrix
        printBoard(board);
    }

    public static boolean solveNQueens(int[][] board, int row, int n) {
        if (row == n) {
            // All queens are placed, solution found
            return true;
        }

        for (int col = 0; col < n; col++) {
            if (isValid(board, row, col, n)) {
                // Place the queen and continue with the next row
                board[row][col] = 1;

                if (solveNQueens(board, row + 1, n)) {
                    // If placing the queen in this position leads to a solution, return true
                    return true;
                }

                // If placing the queen in this position does not lead to a solution, backtrack
                board[row][col] = 0;
            }
        }

        // If no valid position is found for the current queen, backtrack
        return false;
    }

    private static boolean isValid(int[][] board, int row, int col, int n) {
        // Check for queens in the same column
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 1) {
                return false;
            }
        }

        // Check for queens in the left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        // Check for queens in the right diagonal
        for (int i = row, j = col; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 1) {
                return false;
            }
        }

        return true;
    }

    private static void printBoard(int[][] board) {
        int n = board.length;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(board[i][j] == 1 ? "Q " : ". ");
            }
            System.out.println();
        }
    }
}
