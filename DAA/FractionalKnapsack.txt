package Practicals;

import java.util.Arrays;
import java.util.Comparator;

class Item {
    int weight;
    int profit;

    public Item(int weight, int profit) {
        this.weight = weight;
        this.profit = profit;
    }
}

public class FractionalKnapsack {
    public static void main(String[] args) {
        int[] weights = {10, 40, 20, 30};
        int[] profit = {60, 40, 100, 120};
        int capacity = 50;

        double maxValue = getMaxValue(weights, profit, capacity);
        System.out.println("Maximum profit in Knapsack = " + maxValue);
    }

    public static double getMaxValue(int[] weights, int[] profit, int capacity) {
        int n = weights.length;

        // Create an array of Items
        Item[] items = new Item[n];
        for (int i = 0; i < n; i++) {
            items[i] = new Item(weights[i], profit[i]);
        }

        // Sort items based on value-to-weight ratio in descending order
        Arrays.sort(items, Comparator.comparingDouble(item -> -item.profit / (double) item.weight));

        double totalValue = 0;
        int currentWeight = 0;

        // Iterate through the sorted items and add them to the knapsack
        for (Item item : items) {
            if (currentWeight + item.weight <= capacity) {
                // Add the whole item if it fits
                totalValue += item.profit;
                currentWeight += item.weight;
            } else {
                // Add a fraction of the item to fill the remaining capacity
                double remainingCapacity = capacity - currentWeight;
                totalValue += (item.profit / (double) item.weight) * remainingCapacity;
                break;  // Knapsack is full
            }
        }

        return totalValue;
    }
}
